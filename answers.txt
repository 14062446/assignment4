1. -The game code is split into different modules that handle different aspects of the game.
	For example, Prompt.py installs the different commands that could be entered and the correct response from
	the game. Model.py contains various classes that are responsible for the location of the player,
	the adquisition of objects, hints, and other game events.  Game.py contains a large class
	that tracks the status of the player. 
	
	- Many of the moduules contain classes of functions that are responsible for similar aspects 
	of the game.  For example, in model.py, the class Object (line 103) includes functions that
	handle the adquisition/dropping of objects.
	
	- The author uses numerous functions to avoid rewriting the same code to carry out different actions 
	throughout the game.
	
2. Overall I think the names are meaningful, but there are many that are clearly only to be understood
	by the author.  Examples of meaningful names are:
		- prompt.py line 28 install_words function addresses the words entered in the command line, as they
		could be 5 characters or greater.
		- game.py line 323 function describe_location allows for the game to tell the player about where they
		are in the game.
		
		Not Meaningful:
		- game.py lines 45-47 variables self_clock1 and self_clock2--it is hard to know the difference between
		the two.
		- game.py lines 427 and 433 functions do_command and _do_command--again, it would be easy to get the two
		confused because they are so similar.
		
3. There are many small functions in the program that execute one action, but there are also a good number that 
do multiple things.  
	One Action:
		- game.py line 88 function inventory(self) returns the objects that the player has in his/her possession.
		-game.py line 96 function objects_here(self) returns the objects in the location of the player.
		
	Multiple Actions:
		-data.py line 67 functions section3-section12 do multiple different things that provide the structure/order
		of the game.
	
4. A lot of the functions in the program include an if statement that causes the player to die if his condition is true
in the if statement. However, many of these functions are responsible for other things, so ending the life of the player
seems like a side effect. For example, in the function describe_location in game.py, in line 387 we see the function
self.die_here() called.	


5. There are two or more instances where the author checks whether the game should offer a hint. In game.py
 line 389 and game.py 1582 (function should_offer_hint) should be combined in some way to avoid repeating code.
 
6. The program accounts for  symbol, number, and non-word text inputs by skipping over symbols, and returning
"I don't know that word" or "I don't understand that" when given number or a non-word text input.  


7. Game.py line 19 class Game is responsible for properties of the cave, the status of the player and game,
the start and finish of the game, the inventory of the player, dwarf attacks, etc.  The class takes up almost
all of game.py so it should probably be split into multiple classes.

8. Game.py line 19 class Game is not cohesive. There are too many functions and each alters a small number
of the attributes within the class.

9. The author's style of commenting seems to be more geared towards helping him (or other programmers very
familiar with the game) understand the code.  There are many comments that the reader is not expected to understand,
such the number comments in game.py lines 376-383. There are comments to explain confusing variable names 
line in game.py lines 21-37, 43-51.  There are also instances where the author uses comments to explain what a 
group of functions do, when he could just define a class, for example:
	-data.py line 38 #Helper functions
	-data.py line 57 #Knowledge of what each section contains
Good Comments:
	-data.py line 6 explains that Adventure only knows the first five letters of each word
	-at the beginning of each module there is a comment explaining its overall use.
Bad Comments:
	-The various comments to explain variable meaning.  The variables should be clear enough
	so we don't need extra comments.
	-game.py line 78 #Properties is redundant because there is a @property above each function.
	
10. data.py lines 36-40 there is space (and a comment) tp indicate the separation between
class Data and the other functions below that are not a part of the class	

11. Due to the fact that the tests are not stored on the same level as the rest of the modules, we cannot 
import the play module to run test_commands.py. When running test_walks.py and test_data.py
we get no return.  So, the test do not meet the FIRST criteria. We cannot tell if they are 
fast or not, but likely would be if they successfully ran. They are independent so they can
be run in any order. They are repeatable in any environment, but must be able to import the adventure
modules in order to run. The tests don't seem to be self-validating because two of them
had no return so it was unclear what went wrong.
			 			 			